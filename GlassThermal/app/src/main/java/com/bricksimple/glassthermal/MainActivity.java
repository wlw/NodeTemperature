package com.bricksimple.glassthermal;

import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.variable.framework.android.bluetooth.BluetoothService;
import com.variable.framework.android.bluetooth.DefaultBluetoothDevice;
import com.variable.framework.node.AndroidNodeDevice;
import com.variable.framework.node.NodeDevice;

import android.app.Activity;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.support.v4.app.FragmentActivity;
import com.variable.framework.node.BaseSensor;
import com.variable.framework.dispatcher.DefaultNotifier;
import com.variable.framework.node.ThermaSensor;
import com.variable.framework.node.enums.NodeEnums;
import com.variable.framework.node.reading.SensorReading;
import android.view.WindowManager;

import java.text.DecimalFormat;
import com.google.android.glass.app.Card.ImageLayout;
import android.graphics.BitmapFactory;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import android.view.MotionEvent;
import android.view.KeyEvent;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity implements NodeDevice.SensorDetector, ThermaSensor.ThermaListener {

    /** {@link CardScrollView} to use as the main content view. */
    private        CardScrollView   mCardScroller;
    private static BluetoothService mService;
    private        BleInterfacing   bleInterfacing;
    //private        ThermaFragment   thermaFragment = new ThermaFragment();
    private        Card             card;
    private        ThermaSensor     therma;
    private        GestureDetector  mGestureDetector;

    /** "Hello World!" {@link View} generated by {@link #buildView("")}. */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
        Integer iWaitTime = 15;

        super.onCreate(bundle);
        setContentView(R.layout.activity_main);
        //mGestureDetector = createGestureDetector(this);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mView = buildView();
        setContentView(mView);

        mService = new BluetoothService();
        NodeApplication.setServiceAPI(mService);

        // find our NODE device
        /* WLW
        IntentFilter filter = new IntentFilter();
        filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
        registerReceiver(mReceiver, filter);
*/
        //WLW may want to do this in a thread
        bleInterfacing = new BleInterfacing();
        bleInterfacing.FindNodeDevice(this.getApplicationContext());

    }

    @Override
    public void onBackPressed() {


        if(NodeConstants.bRunning)
            therma.stopSensor();
        finish();
    }

    @Override public boolean onKeyUp(int keyCode, KeyEvent event)
    {
        // States if the key event was handled
        boolean result = false;

        // If the user tapped on the trackpad
        if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER)
        {
            // TAP EVENT
            if(NodeConstants.bRunning) {
                therma.stopSensor();
                NodeConstants.bRunning = false;
                newCard("\n\n         Paused");
            }
            else {
                therma.startSensor();
                NodeConstants.bRunning = true;
            }
        }
        // Else anything else happened
        else
        {
            // Perform the default behavior
            result = super.onKeyUp(keyCode, event);
        }

        // Return the "event handled" flag
        return result;
    }
/* WLW lies
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        return(super.onGenericMotionEvent(event));
    }

    public GestureDetector createGestureDetector(Context context)
    {
        GestureDetector gestureDetector = new GestureDetector(context);
        //Create a base listener for generic gestures
        gestureDetector.setBaseListener( new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {

                // LONG_PRESS, SWIPE_DOWN, SWIPE_LEFT, SWIPE_RIGHT, SWIPE_UP,
                // TAP, THREE_LONG_PRESS, THREE_TAP, TWO_LONG_PRESS, TWO_SWIPE_DOWN,
                // TWO_SWIPE_LEFT, TWO_SWIPE_RIGHT, TWO_SWIPE_UP, TWO_TAP;

                if (gesture == Gesture.TAP) {
                    if(NodeConstants.bRunning) {
                        therma.stopSensor();
                        NodeConstants.bRunning = false;
                    }
                    else {
                        therma.startSensor();
                        NodeConstants.bRunning = true;
                    }
                    return true;
                }
                return false;
            }
        });
        return gestureDetector;

    }
*/
    @Override
    protected void onResume() {
        super.onResume();

        DefaultNotifier.instance().addSensorDetectorListener(this);
        //mCardScroller.activate();

        /* WLW
        Fragment frag = new MainFragment();
        animateToFragment(frag, MainFragment.TAG);
        */
        if(NodeConstants.bluetoothDevice == null) {
            card.setText(R.string.device_notfound);
            setContentView(card.getView());
        }
        else {
            NodeDevice node = NodeApplication.getActiveNode();

            if(mService != null) {
                //One way to connect to a device
                //mService.connect(device.getAddress());


                //Second way, using the NodeDevice implementation
                NodeDevice selectedNODE = AndroidNodeDevice.getOrCreateNodeFromBluetoothDevice(NodeConstants.bluetoothDevice,
                        new DefaultBluetoothDevice(mService));

                //Ensure One Connection At a Time...
                if (node != null && !selectedNODE.equals(node) && node.isConnected()) {
                    node.disconnect();
                }

                //Store the Active NODE in the application space for other fragments to use
                NodeApplication.setActiveNode(selectedNODE);

                //initiate connection
                selectedNODE.connect();

                startTemperatureProbe();
            }
        }
    }

    @Override
    public void onSensorConnected(NodeDevice node, BaseSensor sensor) {
    }

    @Override
    public void onSensorDisconnected(NodeDevice node, BaseSensor sensor) {}

    @Override
    protected void onPause() {
        //if(mCardScroller != null)
        //    mCardScroller.deactivate();
        super.onPause();
    }


    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private View buildView() {
        card = new Card(this);

        card.setText(R.string.hello_world);
        return card.getView();
    }

    /* WLW
    public void animateToFragment(final Fragment frag, final String tag){
        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        Fragment existingFrag = getSupportFragmentManager().findFragmentByTag(tag);
        if(existingFrag != null){
            getSupportFragmentManager().beginTransaction().remove(existingFrag).commitAllowingStateLoss();
        }

        ft.replace(R.id.fragment_container, frag, tag);
        ft.addToBackStack(null);
        ft.commit();
    }
*/
    private void startTemperatureProbe() {

        int iCount = 0;

        DefaultNotifier.instance().addThermaListener(this);
        NodeDevice node = NodeApplication.getActiveNode();
        if(node != null)
        {
            therma = null;
            while((therma == null) && (iCount < 10)) {
                try {
                    Thread.sleep(1000);
                    iCount++;
                }
                catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
                therma = node.findSensor(NodeEnums.ModuleType.THERMA);
            }
            if(therma != null) {
                therma.startSensor();
                NodeConstants.bRunning = true;
            }
            else {
                card = new Card(this);

                card.setText(R.string.device_not_found);
                setContentView(card.getView());
            }
        }
    }
    @Override
    public void onTemperatureReading(ThermaSensor sensor, SensorReading<Float> reading) {

        Message m = mHandler.obtainMessage(NodeConstants.MESSAGE_THERMA_TEMPERATURE);
        m.getData().putFloat(NodeConstants.FLOAT_VALUE_KEY, reading.getValue());
        m.sendToTarget();

    }


    private void newCard(String text) {
        Card card = new Card(this);

         card.setText(text);

        setContentView(card.getView());
    }

    private final Handler mHandler = new Handler(){
        private final DecimalFormat formatter = new DecimalFormat("0.00");
        @Override
        public void handleMessage(Message msg)
        {
            float value = msg.getData().getFloat(NodeConstants.FLOAT_VALUE_KEY);
            value =  value * 1.8000f + 32;
            String unitSymbol = " ºF";
            String temperatureText = "\n\n          " + formatter.format(value) +  unitSymbol;
            if(NodeConstants.bRunning == true)
                newCard(temperatureText);

        }
    };
}
